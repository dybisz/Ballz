#include "shader_program.hpp"

/* ----- EXCEPTIONS ----- */
CreateProgEx        createProgEx;
DeleteProgEx        deleteProgEx;
AttachShdEx         attachShdEx;
LinkProgEx          linkShdEx;
LogProgEx           logProgEx;


ShaderProgram::ShaderProgram()
{
    /* ----- CREATE PROGRAM ----- */
    try {
        createProgram();
    } catch(exception& e) {
        cout << e.what() << '\n';
    }
}

ShaderProgram::~ShaderProgram()
{
    try {
        deleteProgram();
    } catch(exception& e) {
        cout << e.what() << '\n';
    }
}

/**
 * Attaches provided shaders to the program and links it.
 */
void ShaderProgram::attachShaders(GLuint vertexShader, GLuint fragmentShader)
{


    /* ----- ATTACH SHADERS ----- */
    try{
        attachShader(vertexShader);
        attachShader(fragmentShader);
    } catch(exception& e) {
        cout << e.what() << '\n';
    }

    /* ----- LINK PROGRAM ----- */
    try {
        linkProgram();
    } catch(exception& e) {
        cout << e.what() << '\n';
;    }

}

/**
 * Method calls glCreateProgram() and throws appropriate exception when needed.
 */
void ShaderProgram::createProgram()
{
    programID = glCreateProgram();
    if(GL_INVALID_OPERATION == glGetError())
    {
        printf("[Error] glCreateProgram is executed between the execution of glBegin "
                       "and the corresponding execution of glEnd.");
        throw createProgEx;
    }
}

/**
 * Calls glDeleteProgram and check for errors.
 */
void ShaderProgram::deleteProgram()
{
    glDeleteProgram(programID);

    if(GL_INVALID_VALUE == glGetError())
    {
        printf("[Error] Program's id is not a value generated by OpenGL\n");
        throw deleteProgEx;
    }
}

/**
 * Calls glAttachShader and checks for every possible error.
 */
void ShaderProgram::attachShader(GLuint shaderID)
{
    glAttachShader(programID,shaderID);

    switch(glGetError())
    {
        case GL_INVALID_VALUE:
            printf("[Error] program: %d shader %d\n", (int)programID,(int)shaderID);
            printf("[Error] Either program or shader is not a value generated by OpenGL\n");
            throw attachShdEx;

        case GL_INVALID_OPERATION:
            printf("[Error] programID: %d shaderID %d\n", (int)programID,(int)shaderID);
            printf("[Error] Program's id does not represent a program "
                            "or shader's id does not represent shader or "
                           "shader is attached to another program\n");
            throw attachShdEx;
    }
}

/**
 * Method calls glLinkProgram() and checks for errors.
 * If everything is correct, log of the linking process is displayd,
 * if not - appropriate LinkProgrEx is thrown.
 */
void ShaderProgram::linkProgram()
{
    glLinkProgram(programID);

    /* ----- ERRORS FROM CALLING glLinkProgram() */
    switch(glGetError())
    {
        case GL_INVALID_VALUE:
            printf("[Error] programID: %d", (int) programID);
            printf("[Error] Program's id is not a value generated by OpenGL\n");
            throw linkShdEx;
        case GL_INVALID_OPERATION:
            printf("[Error] programID: %d", (int) programID);
            printf("[Error] Program's id does not represent program\n");
            throw linkShdEx;
    }

    /* ----- LOG FROM LINKING PROCESS ----- */
    GLint programSuccess = GL_TRUE;
    getParam(programID, GL_LINK_STATUS, &programSuccess);
    if( programSuccess != GL_TRUE )
    {
        printf( "[Error] Linking program %d!\n", programID );
        printProgramLog( programID );
        throw linkShdEx;
    }
}

/**
 * Prints on stdout log of provided program. ALl possible errors are handled
 * and if any occurred, appropriate exception is thrown.
 */
void ShaderProgram::printProgramLog(GLuint programID)
{
    if(glIsProgram(programID))
    {
        int infoLogLength = 0;
        int maxLength = infoLogLength;

        getParam(programID, GL_INFO_LOG_LENGTH, &maxLength);

        char* infoLog = new char[maxLength];

        getInfoLog(programID, maxLength, &infoLogLength, infoLog);
        if( infoLogLength > 0 )
        {
            printf("[Error] Log: \n");
            printf( "%s\n",infoLog);
        }
        //Deallocate string
        delete[] infoLog;
    }
    else
    {
        printf( "[Error] programID %d is not representing a program\n", programID);
        throw logProgEx;
    }
}