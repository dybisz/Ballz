#include "shader.hpp"

/* ----- EXCEPTIONS ----- */
CreateShdEx         createShdEx;
DeleteShdEx         deleteShdEx;
SourceShdEx         sourceShdEx;
CompileShdEx        compileShdEx;
LogShdEx            logShdEx;

Shader::Shader()
{
//    shaderID = 0;
}

Shader::~Shader()
{
    try{
        deleteShader();
    }catch(exception& e) {
        cout << e.what() << '\n';
    }
}

/**
 * Loads shader from file and in case of success, returns its newly
 * generated ID.
 * Otherwise -1 is returned // TODO
 */
GLuint Shader::loadFromFile(string path, GLenum type)
{
    GLuint _id = 0;
    string shaderString;
    ifstream sourceFile(path.c_str());

    if(sourceFile)
    {
        /* ----- LOAD FROM FILE ----- */
        shaderString.assign((std::istreambuf_iterator<char>(sourceFile)), std::istreambuf_iterator<char>());

        /* ----- CREATE SHADER ----- */
        try {
            _id = createShader(type);
        } catch(exception& e) {
            cout << e.what() << '\n';
        }

        /* ----- SHADER SOURCE ----- */
        try {
            const GLchar* shaderSource = shaderString.c_str();
            attachSource(_id, 1, (const GLchar**)&shaderSource, NULL );
        } catch(exception& e) {
            cout << e.what() << '\n';
        }

        /* ----- COMPILE SHADER ----- */
        try {
            compile(_id, shaderString);
        }catch (exception& e) {
            cout << e.what() << '\n';
        }
    }
    else
    {
        cout << "[Error] Shader file on path: " << path << " not found\n";
        return -1;
    }
    this->shaderID = _id;
    return shaderID;
}

/**
 * Method provides error checking for standard glCreateShader call.
 */
GLuint Shader::createShader(GLenum type)
{
    GLuint id = glCreateShader(type);
    if(GL_INVALID_ENUM == glGetError())
    {
        printf("[Error] Invalid shader type.\n");
        throw createShdEx;
    }
    return id;
}

void Shader::deleteShader()
{
    glDeleteShader(this->shaderID);
    if(GL_INVALID_VALUE == glGetError())
    {
        printf("[Error] Id is not a value generated by OpenGL\n");
        throw deleteShdEx;
    }

}

/**
 * Provides error checking for glShaderSource() routine;
 */
void Shader::attachSource(GLuint shaderID, GLsizei count, const GLchar **shaderSource,const GLint *length)
{
    glShaderSource(shaderID, count, shaderSource, length);

    switch(glGetError())
    {
        case GL_INVALID_VALUE:
            printf("[Error] Shader's id is not a value generated by OpenGL\n");
            throw sourceShdEx;
        case GL_INVALID_OPERATION:
            printf("[Error] Id does not identifies a shader object\n");
            throw sourceShdEx;
    }
}
/**
 * Provides error checking for glCompileShader routine and compilation process;
 * Appropriate exception is thrown when exception occurs. In addition shader
 * represented by shaderID is destroyed in case of bad compilation and its
 * source code along with error log is provided.
 */
void Shader::compile(GLuint shaderID, string source)
{
    glCompileShader(shaderID);

    /* ----- ERROR CHECK FOR glCompileShader() ----- */
    switch(glGetError())
    {
        case GL_INVALID_OPERATION:
            printf("[Error] Id does not represents shaders object or a shader compiler is not supported\n");
            throw compileShdEx;
        case GL_INVALID_VALUE:
            printf("[Error] Shader's id is not a value generated by OpenGL\n");
            throw compileShdEx;
    }

    /* ----- COMPILATION CHECK ----- */
    GLint shaderCompiled = GL_FALSE;
    getShaderParam(shaderID, GL_COMPILE_STATUS, &shaderCompiled);
    if( shaderCompiled != GL_TRUE )
    {
        cout << "[Error] Unable to compile shader " << shaderID << '\n';
        cout << "[Error] Source:\n" << source << '\n';
        printShaderLog(shaderID);
        glDeleteShader(shaderID);
    }
}

/**
 * Prints on stdout log of provided shader. ALl possible errors are handled
 * and if any occurred, appropriate exception is thrown.
 */
void Shader::printShaderLog(GLuint shader)
{
    if(glIsShader(shader))
    {
        int infoLogLength = 0;
        int maxLength = infoLogLength;

        getShaderParam(shader, GL_INFO_LOG_LENGTH, &maxLength );

        char* infoLog = new char[maxLength];

        getInfoLog(shader, maxLength, &infoLogLength, infoLog);
        if(infoLogLength > 0)
        {
            printf("[Error] Log:\n");
            printf( "%s\n", infoLog );
        }

        delete[] infoLog;
    }
    else
    {
        printf( "[Error] shaderID %d is not representing a shader\n", shader);
        throw logShdEx;
    }
}

