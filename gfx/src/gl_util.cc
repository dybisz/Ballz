#include "gl_util.h"

bool GL_error()
{
    GLenum error = glGetError();
    if(error != GL_NO_ERROR)
    {
        printf( "[Error] %s\n", gluErrorString(error));
        return true;
    }
    else return false;
}

void GL_print_version()
{
    printf("OpenGL version supported by this platform (%s): \n", glGetString(GL_VERSION));
}
// TODO(dybisz) getProgramParam and switch it with glGetProgramiv in shader.cpp and shader_program.cpp
void getShaderParam(GLuint shader,  GLenum pname,  GLint *params)
{
    glGetShaderiv(shader, pname, params);

    switch(glGetError())
    {
        case GL_INVALID_ENUM:
            printf("[Error] pname is not an accepted value\n");
            printf("[Error] gl_util getParam call\n");
            break;
        case GL_INVALID_VALUE:
            printf("[Error] Provided id is not a value generated by OpenGL\n");
            printf("[Error] gl_util getParam call\n");
            break;
        case GL_INVALID_OPERATION:
            printf("[Error] pname is correct but shader compiler is not supported or "
                           "id does not represnet shader object\n");
            printf("[Error] gl_util getParam call\n");
            break;
    }
}

void getInfoLog(GLuint shader,  GLsizei  maxLength,  GLsizei * length,  GLchar * infoLog)
{
    glGetShaderInfoLog(shader, maxLength, length, infoLog);

    switch(glGetError())
    {
        case GL_INVALID_VALUE:
            printf("[Error] Provided id is not a value generated by OpenGL\n");
            printf("[Error] gl_util getInfoLog call\n");
            break;
        case GL_INVALID_OPERATION:
            printf("[Error] glGetShaderInfoLog is executed between the execution of glBegin "
                           "and the corresponding execution of glEnd\n");
            printf("[Error] gl_util getInfoLog call\n");
            break;

    }
}